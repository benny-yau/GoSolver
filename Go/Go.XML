<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GoSharp</name>
    </assembly>
    <members>
        <member name="T:Go.Game">
            <summary>
            Contains core of methods for game play. The root of a specified game may be obtained using the Root property.
            </summary>
        </member>
        <member name="P:Go.Game.GameInfo">
            <summary>
            Retrieves the game info is stored in the root of the game.
            </summary>
        </member>
        <member name="M:Go.Game.GetStartingDepth">
            <summary>
            Depth to start with. Pass move not counted.
            Look ahead depth is minimum depth to start with.
            </summary>
        </member>
        <member name="P:Go.Game.BreakRealTime">
            <summary>
            Enable or disable break on real-time move.
            </summary>
        </member>
        <member name="P:Go.Game.RunTimeStopWatch">
            <summary>
            Stop watch for run time.
            </summary>
        </member>
        <member name="M:Go.Game.TimeOut(Go.Game)">
            <summary>
            Time out if stop watch exceeds time limit set at runTimeStop.
            </summary>
        </member>
        <member name="M:Go.Game.#ctor(Go.GameInfo)">
            <summary>
            Create new game.
            </summary>
        </member>
        <member name="M:Go.Game.#ctor(Go.Game)">
            <summary>
            Create new game from previous game.
            </summary>
        </member>
        <member name="M:Go.Game.InitializeFromGameInfo">
            <summary>
            Initialize new game with root game and board parameters.
            </summary>
        </member>
        <member name="M:Go.Game.MakeMove(System.Int32,System.Int32,Go.Content)">
            <summary>
            Make move on the board and set pass move for ko moves.
            </summary>
        </member>
        <member name="M:Go.Game.SetupMove(System.Int32,System.Int32,Go.Content)">
            <summary>
            Setup move on the board from initial scenario.
            </summary>
        </member>
        <member name="M:Go.Game.InternalMakeMove(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Makes move on board internally. Returns result as MakeMoveResult.
            </summary>
        </member>
        <member name="M:Go.Game.GameDepth(Go.Game)">
            <summary>
            Depth of game starting from zero.
            </summary>
        </member>
        <member name="M:Go.Game.CheckSolutionAndMappedPoints">
            <summary>
            Check if move is present in solution or json map. Solution moves can end either on player or computer move, so check if solution is completed before and after making move.
            </summary>
        </member>
        <member name="M:Go.Game.UseDictatePoints(Go.ConfirmAliveResult)">
            <summary>
            Use dictate points specified which by-pass the mapped points. This allow for path correction and extension of mapped points beyond sixth move where much calculation time is required.
            </summary>
        </member>
        <member name="M:Go.Game.FindSecondMoveMapped(System.Object)">
            <summary>
            Get second move from json map and return confirm alive result.
            </summary>
        </member>
        <member name="M:Go.Game.FindFourthMoveMapped(System.Object)">
            <summary>
            Get fourth move from json map and return confirm alive result.
            </summary>
        </member>
        <member name="M:Go.Game.FindSixthMoveMapped(System.Object)">
            <summary>
            Get sixth move from json map and return confirm alive result.
            </summary>
        </member>
        <member name="M:Go.Game.CheckMappedResults(Go.ConfirmAliveResult)">
            <summary>
            Include flag for target survived or killed.
            </summary>
        </member>
        <member name="M:Go.Game.PrintSurvivalList">
            <summary>
            Call from immediate window to show game try moves for survival moves.
            </summary>
        </member>
        <member name="M:Go.Game.PrintKillList">
            <summary>
            Call from immediate window to show game try moves for kill moves.
            </summary>
        </member>
        <member name="M:Go.Game.PrintGameMoveList(System.Collections.Generic.List{Go.GameTryMove},System.Collections.Generic.List{Go.GameTryMove},Go.Game)">
            <summary>
            Print game moves on exhaustive mode.
            </summary>
        </member>
        <member name="M:Go.Game.IsExhaustiveMode(System.Int32)">
            <summary>
            To print debug statements on exhaustive mode.
            </summary>
        </member>
        <member name="M:Go.Game.InitializeComputerMove">
            <summary>
            Initializes start of search for exhaustive or real-time mcts move (default).
            To debug with exhaustive search, set USE_MONTE_CARLO_RUNTIME in app.config to false.
            </summary>
        </member>
        <member name="M:Go.Game.MakeExhaustiveSearch">
            <summary>
            Start exhaustive search.
            </summary>
        </member>
        <member name="M:Go.Game.GetSurvivalMoves(Go.Game)">
            <summary>
            Get all possible survival moves. Check if the game has ended with target survived. Check and remove redundant moves. 
            For survive only, check for recursion and add pass move to check for both alive where necessary.
            </summary>
        </member>
        <member name="M:Go.Game.CheckSurvivalRedundantMoves(Go.GameTryMove)">
            <summary>
            Check for various redundant moves for survival that can be eliminated to reduce range of possible moves.
            </summary>
        </member>
        <member name="M:Go.Game.CheckKillRedundantMoves(Go.GameTryMove)">
            <summary>
            Check for various redundant moves for kill that can be eliminated to reduce range of possible moves.
            </summary>
        </member>
        <member name="M:Go.Game.MakeSurvivalMove(System.Int32,Go.Game)">
            <summary>
            Make all possible survival moves by exhaustive search.
            </summary>
        </member>
        <member name="M:Go.Game.KoMoveCheck(Go.Game,Go.SurviveOrKill,Go.GameTryMove,System.Int32)">
            <summary>
            Make ko move and return result as KoAlive if ko move wins.
            </summary>
        </member>
        <member name="M:Go.Game.GetKillMoves(Go.Game)">
            <summary>
            Get all possible kill moves. Check if the game has ended with target killed. Check and remove redundant moves. 
            For kill only, restore neutral points where necessary and add random move for kill where no move is available.
            </summary>
        </member>
        <member name="M:Go.Game.CreateRandomMoveForRedundantKo(System.Collections.Generic.List{Go.GameTryMove},System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Create random move for redundant ko.
            Killer ko within killer group <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_A79" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_B39" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_A28_101Weiqi_5" />
            Check covered eye <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_A28_101Weiqi_6" />
            Check atari resolved <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_TianLongTu_Q17078_2" />
            Check base line leap link <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_TianLongTu_Q17078_3" />
            </summary>
        </member>
        <member name="M:Go.Game.CreateRandomMoveForKill(System.Collections.Generic.List{Go.GameTryMove},Go.Game)">
            <summary>
            Create random move if no more try moves for kill.
            <see cref="!:UnitTestProject.KoTest.KoTest_Scenario_WuQingYuan_Q31498" />
            <see cref="!:UnitTestProject.KoTest.KoTest_Scenario_TianLongTu_Q17077" />
            </summary>
        </member>
        <member name="M:Go.Game.MakeKillMove(System.Int32,Go.Game)">
            <summary>
            Make all possible kill moves by exhaustive search.
            </summary>
        </member>
        <member name="T:Go.GameTryMove">
            <summary>
            Possible try move made in board of TryGame with all associated properties of the move.
            The new move is made on the board of the TryGame, while the old board is retained on the CurrentGame.
            </summary>
        </member>
        <member name="M:Go.GameTryMove.MakeKoMove(Go.Point,Go.SurviveOrKill)">
            <summary>
            Make ko move. Set KoGameCheck to allow only survive or kill for any further ko moves.
            </summary>
        </member>
        <member name="P:Go.GameTryMove.IsNegligible">
            <summary>
            Is negligible.
            </summary>
        </member>
        <member name="P:Go.GameTryMove.IncreasedKillerGroups">
            <summary>
            Increased count of killer groups.
            </summary>
        </member>
        <member name="M:Go.GameTryMove.MakeMoveWithOpponentAtSamePoint(System.Boolean)">
            <summary>
            Make move at same point as opponent.
            </summary>
        </member>
        <member name="P:Go.GameTryMove.IsRedundantMove">
            <summary>
            Is redundant move.
            </summary>
        </member>
        <member name="M:Go.AtariHelper.FindAndResolveAtari(Go.GameTryMove)">
            <summary>
            Find target groups where the neighbour group of the move is reduced to liberty of one only.
            Resolved atari is where the group of the move has increased liberty from one.
            <see cref="!:UnitTestProject.FindAndResolveAtariTest.FindAndResolveAtariTest_Scenario_XuanXuanGo_Q18358" />
            </summary>
        </member>
        <member name="M:Go.AtariHelper.AtariByGroup(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Check if any atari on neighbour groups, including ko. 
            Check for ko <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30315" />
            </summary>
        </member>
        <member name="M:Go.AtariHelper.AtariByGroup(Go.Group,Go.Board,System.Boolean)">
            <summary>
            Atari by group.
            Ensure only one ko fight group <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_A85" />
            Check for ko liberty <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_A85_2" />
            </summary>
        </member>
        <member name="M:Go.AtariHelper.DoubleAtariOnTargetGroups(Go.Board,System.Collections.Generic.List{Go.Group})">
            <summary>
            Double atari on target groups.
            </summary>
        </member>
        <member name="M:Go.AtariHelper.DoubleAtariWithoutEscape(Go.Board)">
            <summary>
            Double atari without escape.
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.EnableCheckForPassMove(Go.Board,Go.Content,System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Add pass move to survival try moves to check for both alive. Ensure no other try move present other than those within killer group.
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.CheckForBothAliveAtMove(Go.Board)">
            <summary>
            Check for both alive at move.
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.EnableCheckForBothAlive(Go.Board,Go.Group)">
            <summary>
            Enable check for both alive.
            For simple seki which is usually the case, find one killer group with at least two liberties, and one survival neighbour group with at least two liberties. Simple seki <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_SimpleSeki" />
            In most cases, there is only one killer group and one neighbour survival group, but there can also be two neighbour survival groups. Simple seki with two neighbour survival groups <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_XuanXuanGo_A151_101Weiqi" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario3dan16" />
            Get target groups not within killer group <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q15126_2" />
            Fill eye points with content <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_XuanXuanGo_A27" />
            Two liberties for content group <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_B43" />
            More than one content group in simple seki <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q31646" />
            Ensure shared liberty suicidal for killer <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q31445" />
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.CheckSimpleSeki(Go.Board,Go.Board,System.Collections.Generic.List{Go.Group},Go.Group,System.Collections.Generic.List{Go.Point})">
            <summary>
            Check simple seki.
            Ensure at least two liberties in survival neighbour group <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_A87" />
            Cover eye point <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_B43" />
            Check diagonal at eye point <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_A75" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WindAndTime_Q30275" />
            Check killer formation for two liberties <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Side_A23_2" />
            Check killer formation for three or more liberties <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q31493_4" />
            Ensure killer group does not have real eye <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_TianLongTu_Q16424_2" />
            Check for increased killer groups <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q31445_2" />
            Check content group connect and die <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_TianLongTu_Q16424_3" />
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.BothAliveDiagonalEye(Go.Board,Go.Group,Go.Point)">
            <summary>
            Check if eye at diagonal of killer group for both alive.
            <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_WindAndTime_Q30275" />
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.CheckComplexSeki(Go.Board,System.Collections.Generic.List{Go.Group},System.Collections.Generic.List{Go.Group})">
            <summary>
            Check complex seki.
            With diagonal group <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario3dan22" />
            Without diagonal group <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_A123" />
            Check suicidal for both players and not ko move at liberty <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_GuanZiPu_B18" />
            Find uncovered eye <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_ComplexSeki" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario3dan22" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_GuanZiPu_B18_2" />
            Clear all killer groups with empty points <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WindAndTime_Q30213" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_A123" />
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.FillEyePointsBoard(Go.Board,Go.Group)">
            <summary>
            Fill eye points with stone of same content.
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.GetKillerGroupsForBothAlive(Go.Board,Go.Content)">
            <summary>
            Get killer groups for both alive.
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.CheckCoveredEyeInKillerGroup(Go.Board,System.Collections.Generic.List{Go.Group})">
            <summary>
            Check covered eye in killer group.
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WindAndTime_Q30005" />
            Not covered eye <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_Corner_A123" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WindAndTime_Q30213" />
            </summary>
        </member>
        <member name="M:Go.BothAliveHelper.AddPassMove(Go.Game)">
            <summary>
            Add pass move for game try move.
            </summary>
        </member>
        <member name="M:Go.DebugHelper.DebugWriteWithTab(System.String,System.Int32)">
            <summary>
            Print debug statements with tabs in front.
            </summary>
        </member>
        <member name="M:Go.DebugHelper.PrintGameTryMoves(Go.Game,System.Collections.Generic.List{Go.GameTryMove},System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Print game try moves and redundant try moves on exhaustive search mode.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Go.DirectionHelper.DirectionLinkedList">
            <summary>
            Create linked list of all four directions, in clockwise rotation with direction pointing to center.
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.GetNewDirection(Go.Direction,System.Int32)">
            <summary>
            Get new direction based on number of times direction rotated.
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.IsEdgeInDirection(Go.Board,Go.Point,Go.Direction)">
            <summary>
            Check if point is at edge based on direction specified. 
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.GetPointInDirection(Go.Board,Go.Point,Go.Direction,System.Boolean)">
            <summary>
            Move point in direction specified.
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.GetPointInDirection(System.Int32,Go.Board,Go.Point,Go.Direction)">
            <summary>
            Repeat number of times in same direction to move point.
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.GetDirectionFromTwoPoints(Go.Point,Go.Point)">
            <summary>
            Get direction where p is moving away from q.
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.GetRotationIndex(Go.Direction)">
            <summary>
            Get the count to rotate to get direction from linked list.
            </summary>
        </member>
        <member name="M:Go.DirectionHelper.TigerMouthEyePoints(Go.Board,Go.Point,Go.Point)">
            <summary>
            Get eye points at the opposite diagonals of the tiger mouth.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindEye(Go.Board,System.Int32,System.Int32,Go.Content)">
            <summary>
            An eye is a point where all direct connected points are black or white as specified.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindUncoveredEye(Go.Board,Go.Point,Go.Content)">
            <summary>
            An uncovered eye is a point where none or only one diagonal point covered by opposite content if point is in the middle area, and no diagonal point covered by opposite content if point is at the side or at the corner.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.CoveredMove(Go.Board,Go.Point,Go.Content)">
            <summary>
            Covered move.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.IsCovered(Go.Board,Go.Point,Go.Content)">
            <summary>
            Is covered.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindCoveredEye(Go.Board,Go.Point,Go.Content)">
            <summary>
            Find false eye which has one or more diagonal points covered by opposite content.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindCoveredEyeAfterCapture(Go.Board,Go.Group)">
            <summary>
            Find covered eye within empty space after capture.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.CheckCoveredEyeAtSuicideGroup(Go.Board,Go.Group)">
            <summary>
            Check for two-point covered eye for suicide group.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindNonSemiSolidEye(Go.Board,Go.Point,Go.Content)">
            <summary>
            Find eye that is not semi solid eye.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindSemiSolidEye(Go.Point,Go.Board,Go.Content)">
            <summary>
            Semi solid eyes are real eyes that can have diagonals with immovable points.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.DoubleAtariOnSemiSolidEye(Go.Board,Go.Point,Go.Content)">
            <summary>
            Double atari on semi solid eye. <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_DoubleAtariOnSemiSolidEye" />
            </summary>
        </member>
        <member name="M:Go.EyeHelper.GetImmovablePoints(Go.Point,Go.Board,Go.Content)">
            <summary>
            Get all immovable points at eye point diagonals.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindRealSolidEye(Go.Point,Go.Content,Go.Board)">
            <summary>
            Find real solid eyes, filled with same content at the diagonals, not immovable points.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindRealEyesWithinTwoEmptyPoints(Go.Board,Go.Group,Go.EyeType)">
            <summary>
            Find if any of the two empty points is a real eye and return only the first one found.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindRealEyeWithinEmptySpace(Go.Board,Go.Group,Go.EyeType)">
            <summary>
            Find if killer group of three points or less can produce real eye. 
            Check snapback <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Scenario_XuanXuanGo_B31" /> 
            Ensure all groups have more than one liberty <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WuQingYuan_Q31469" /> 
            Ensure survival can make move at empty spaces <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18796_2" /> 
            </summary>
        </member>
        <member name="M:Go.EyeHelper.CheckTwoOpponentStonesInRealEye(Go.Board,Go.Group)">
            <summary>
            Check two opponent stones in real eye.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Corner_A139_3" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WuQingYuan_Q30982" />
            </summary>
        </member>
        <member name="M:Go.EyeHelper.CheckUniqueCornerConnectAndDie(Go.Board,Go.Group)">
            <summary>
            Unique corner connect and die.
            One-point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_B33" /> 
            Two-point capture <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_XuanXuanQiJing_A38" /> 
            </summary>
        </member>
        <member name="M:Go.EyeHelper.MakeMoveWithinEmptySpace(Go.Board,Go.Group,Go.EyeType)">
            <summary>
            Allow opponent to make move within eye space to ensure the space can produce the required eye type. 
            </summary>
        </member>
        <member name="M:Go.EyeHelper.RealEyeOfDiagonallyConnectedGroups(Go.Board,Go.Group)">
            <summary>
            Real eye of diagonally connected groups.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_GuanZiPu_B3_2" /> 
            Check connect and die <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q15126" /> 
            Check for covered eye killer group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738_4" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WindAndTime_Q30315" /> 
            Ensure all groups are connected <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_ScenarioHighLevel28" /> 
            </summary>
        </member>
        <member name="M:Go.EyeHelper.FindRealEyeOfAnyKillerGroup(Go.Board,Go.Group)">
            <summary>
            Find real eye for any killer group. Within three points at FindRealEyeWithinEmptySpace and more than three points at FindRealEyeWithinEmptySpace.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.NoEyeForOpponentWithinKillerGroup(Go.Board,Go.Point,Go.Content)">
            <summary>
            No eye for opponent within killer group.
            </summary>
        </member>
        <member name="M:Go.EyeHelper.RealEyeAtDiagonal(Go.GameTryMove,Go.Point)">
            <summary>
            Real eye at diagonal with empty point should be semi solid eye or within enclosed killer group. If eye is filled then check if possible to create real eye.
            Eye filled <see cref="!:UnitTestProject.RedundantEyeDiagonalMoveTest.RedundantEyeDiagonalMoveTestScenario_XuanXuanGo_A46_101Weiqi" />
            Check if covered eye <see cref="!:UnitTestProject.RedundantEyeDiagonalMoveTest.RedundantEyeDiagonalMoveTest_Scenario_GuanZiPu_A2Q29_101Weiqi" />
            Check for double capture <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WuQingYuan_Q30982" />
            <see cref="!:UnitTestProject.RedundantEyeDiagonalMoveTest.RedundantEyeDiagonalMoveTest_Scenario_WuQingYuan_Q30982" />
            </summary>
        </member>
        <member name="M:Go.GameHelper.WinOrLose(Go.SurviveOrKill,Go.ConfirmAliveResult,Go.GameInfo)">
            <summary>
            Determine if win or lose based on result.
            </summary>
        </member>
        <member name="M:Go.GameHelper.KillOrSurvivalForNextMove(Go.Board)">
            <summary>
            Determine if next move is kill or survival, based on count of last moves and initial objective.
            </summary>
        </member>
        <member name="M:Go.GameHelper.GetContentForNextMove(Go.Board)">
            <summary>
            Determine content for next move, based on count of last moves and start content.
            </summary>
        </member>
        <member name="M:Go.GameHelper.GetContentForSurviveOrKill(Go.GameInfo,Go.SurviveOrKill)">
            <summary>
            Determine if content for kill or survival, based on start content.
            </summary>
        </member>
        <member name="M:Go.GameHelper.SetupMoveAvailable(Go.Board,Go.Point)">
            <summary>
            Determine if setup move is available for kill or survival.
            </summary>
        </member>
        <member name="M:Go.GameHelper.GetComputerOrPlayerForNextMove(Go.Board)">
            <summary>
            Determine if next move is computer or player, based on count of last moves and initial player.
            </summary>
        </member>
        <member name="M:Go.GameHelper.CheckForRecursion(Go.GameTryMove)">
            <summary>
            Check for recursion or superkos that are 4 spaces to 12 spaces apart.
            https://senseis.xmp.net/?LongCycleRule
            <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_TianLongTu_Q16446" />
            </summary>
        </member>
        <member name="M:Go.GameHelper.CheckForRecursion(Go.Board)">
            <summary>
            Check for recursion without comparing board.
            </summary>
        </member>
        <member name="M:Go.GameHelper.GetSnapshotBoard(Go.Game,System.Int32)">
            <summary>
            Get specific board from last moves based on moveCount parameter.
            Requires that the root of the game starts from initial setup.
            </summary>
        </member>
        <member name="M:Go.GameHelper.GetMoveBoards(Go.Board,System.Collections.Generic.IEnumerable{Go.Point},Go.Content,System.Boolean)">
            <summary>
            Get move boards.
            </summary>
        </member>
        <member name="M:Go.GameHelper.GetTryMovesForGame(Go.Game)">
            <summary>
            Get all try moves for next move.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.GetKillerGroups(Go.Board,Go.Content)">
            <summary>
            Get killer group fully surrounded by survival stones. Content in parameter refer to target content (usually survival). 
            </summary>
        </member>
        <member name="M:Go.GroupHelper.GetAllKillerGroups(Go.Board,Go.Content)">
            <summary>
            Get killer groups fully surrounded by opponent.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.CheckNeighbourGroupsOfKillerGroup(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Ensure neighbour groups of killer group are diagonal groups, not separated from one another.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.GetNeighbourGroupsOfKillerGroup(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Get neighbour groups of killer group that are not surrounded within the killer group.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.GetKillerGroupFromCache(Go.Board,Go.Point,Go.Content)">
            <summary>
            Get killer group cached in board for single point.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.GetKillerGroupOfNeighbourGroups(Go.Board,Go.Point,Go.Content)">
            <summary>
            Get killer group of neighbour groups.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.IsSingleGroupWithinKillerGroup(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Is single group within killer group.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.IsLibertyGroup(Go.Group,Go.Board)">
            <summary>
            Liberty group requires at least two content points and two empty points.
            </summary>
        </member>
        <member name="M:Go.GroupHelper.IncreasedKillerGroups(Go.Board,Go.Board)">
            <summary>
            Increased killer groups.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.FindTigerMouth(Go.Board,Go.Point,Go.Content)">
            <summary>
            Find tiger mouth where mouth point is empty or filled. Content in parameter represents content of stones forming the tiger mouth. Snapback or ko not handled (see IsConfirmTigerMouth). 
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsTigerMouthForLink(Go.Board,Go.Point,Go.Content,System.Boolean)">
            <summary>
            Is tiger mouth for link.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.GetDiagonalsOfTigerMouth(Go.Board,Go.Point,Go.Content)">
            <summary>
            Get diagonals of tiger mouth.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsImmovablePoint(Go.Point,Go.Content,Go.Board)">
            <summary>
            Immovable point to check for links and diagonal points in semi solid eye. For empty point, return if point is immovable which can be a suicide point or tiger's mouth. If not empty point, then check if opponent can escape. Return if immovable and liberty point at tiger mouth.
            Empty point <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_GuanZiPu_A3" />
            Check connect and die <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Corner_A28" />
            Check filled point connect and die <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_TianLongTu_Q16975" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_Q18341" />
            <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario_TianLongTu_Q14992_2" />
            Check for ko possibility <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WuQingYuan_Q30986" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.CheckForKoInImmovablePoint(Go.Board,Go.Group,Go.Point)">
            <summary>
            Check for ko in immovable point.
            Check for ko by capture neighbour groups <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WuQingYuan_Q30986" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WindAndTime_Q29998_2" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16446" />
            Check for reverse ko fight <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WindAndTime_Q29998" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsConfirmTigerMouth(Go.Board,Go.Board,System.Nullable{Go.Point})">
            <summary>
            Capture suicide group and check for captured count greater than one or move liberty greater than one to ensure no ko or snapback.
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_TianLongTu_Q16827" />
            Check connect and die on current board <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A17_2" />
            Check all connect and die on captured board <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_XuanXuanGo_B32" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario1dan21" />
            </summary>.
        </member>
        <member name="M:Go.ImmovableHelper.ThreeLibertyConnectAndDie(Go.Board,Go.Point)">
            <summary>
            Three liberty connect and die, not all inclusive. Connect and die group may not be target group for two liberties target group.
            <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario_TianLongTu_Q14992_2" />
            <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario_TianLongTu_Q14992" />
            Stone neighbours at diagonal of each other <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario_Side_B19" />
            Check if escapable <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario_Corner_A86" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.EscapeLink(Go.Board,Go.Group)">
            <summary>
            Escape link.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.EscapeCaptureLink(Go.Board,Go.Group,System.Nullable{Go.Point})">
            <summary>
            Escape capture link. Check if escapable for target group to obtain more than two liberties or become non killable.
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A26_3" />
            Check for atari target <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_TianLongTu_Q17154" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.SuicidalAfterMustHaveMove(Go.Board,Go.Board,Go.Point)">
            <summary>
            Suicide move for survival after must-have neutral move at side of the board.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_XuanXuanGo_Q18500" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario1dan21" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.UnescapableGroup(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Ensure group cannot escape by moving at liberty point.       
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_Corner_A85" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q14981" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A12" />
            Check killer ko within killer group <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            Recursive connect and die <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A44_101Weiqi" />
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_TianLongTu_Q17255" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.EscapeByCapture(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Check if can escape by capturing neighbour group.
            Check snapback <see cref="!:UnitTestProject.AtariResponseMoveTest.AtariResponseMoveTest_Scenario_TianLongTu_Q16605" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_2282" />
            Connect and die <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_XuanXuanGo_B32" />
            Connect and die for move group <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_GuanZiPu_A3" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsSuicidalMove(Go.Board,Go.Point,Go.Content)">
            <summary>
            Is suicidal move.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsSuicidalMoveForConnectAndDie(Go.Point,Go.Content,Go.Board,System.Boolean)">
            <summary>
            Suicidal move for connect and die.
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_A80" />
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_A80_2" />
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_WuQingYuan_Q31503" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsSuicidalOnCapture(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Is suicide move on capture.
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_B28_2" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.CaptureSuicideGroup(Go.Point,Go.Board,System.Boolean)">
            <summary>
            Capture group that has liberty of one only and return the board.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.GetLibertyPoint(Go.Board,Go.Group)">
            <summary>
            Get liberty point.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.MakeMoveAtLiberty(Go.Board,Go.Group,Go.Content)">
            <summary>
            Make move at liberty.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.CheckCaptureSecure(Go.Board,Go.Group)">
            <summary>
            Check capture secure.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsSuicidalMoveForBothPlayers(Go.Board,Go.Point,System.Boolean)">
            <summary>
            Is suicide move for both players.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.CheckSnapbackInNeighbourGroups(Go.Board,Go.Group)">
            <summary>
            Check snapback in neighbour groups.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30234" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_Corner_A55" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.CheckSnapback(Go.Board,Go.Group)">
            <summary>
            Check snapback.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A26" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WuQingYuan_Q31493" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B31_4" />
            Two point move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30234" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.IsSnapback(Go.Board,Go.Group,Go.Group)">
            <summary>
            Snapback.
            Check if target group is escapable <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B31" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_GuanZiPu_A3" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q31640" />
            Check kill eye snapback <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B32" />
            Check not more than two stones captured <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_WuQingYuan_Q31471" />
            Check if kill move can escape <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_B28" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.ConnectAndDie(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Check for connect and die on board with captured suicide stone.
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_Corner_A80" />
            <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_XuanXuanGo_B32" />
            Suicidal capture <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_B25" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_Corner_A55" />
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.AllConnectAndDie(Go.Board,Go.Point,Go.Content)">
            <summary>
            Check connect and die for captured board.
            </summary>
        </member>
        <member name="M:Go.ImmovableHelper.PreAtariMove(Go.GameTryMove)">
            <summary>
            Pre-atari move that targets group with liberty of two. Next atari move will capture the group.
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_TianLongTu_Q16594" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_WuQingYuan_Q31154" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanGo_A55" />
            Check target group <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_WindAndTime_Q30370" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.CheckForRecursionTest_Scenario_XuanXuanGo_A28_101Weiqi_2" />
            Check if any liberty is suicidal <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18410" />
            Rare scenario <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario_WindAndTime_Q30275" />
            Check unescapable group <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_Corner_A85" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_WuQingYuan_Q31154" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.DeadFormationInBothAlive(Go.Board,Go.Group,System.Int32,System.Int32)">
            <summary>
            Formations that are essentially dead and do not require a pass move to test for both alive.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.TryKillFormation(Go.Board,Go.Content,System.Collections.Generic.List{Go.Point},System.Int32)">
            <summary>
            Make move at each of the empty points to test if formation created.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.SuicidalKillerFormations(Go.Board,Go.Board,Go.Board)">
            <summary>
            Suicidal killer formations within survival group without any real eye.
            Check suicide at eye point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Side_B19" />
            Check if real eye found in neighbour groups <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario5dan27" />
            Check covered eye at non-killable group <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_AncientJapanese_B6" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.MultipointSnapbackAfterCapture(Go.Board,Go.Board)">
            <summary>
            Multipoint snapback after capture
            One liberty <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_TianLongTu_Q15054" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_B3_4" />
            Two liberties <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario1dan4_2" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q31435" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18710" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.CheckRealEyeInNeighbourGroups(Go.Board,Go.Board)">
            <summary>
            Check if real eye found in neighbour groups.
            Check for covered eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738_3" />
            Allow two-point group without real eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_Q18472" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A38" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17183" />
            Check for corner six <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A38" />
            Find real eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18796_2" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.FindSuicidalKillerFormation(Go.Board,Go.Board,Go.Board)">
            <summary>
            Two-point move with empty point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A48" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17250" />
            Covered eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16424_2" />
            Check for snapback <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30234" />
            Corner three formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18860" />
            One-by-three formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A8" />
            Crowbar edge formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_Q6710" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_TianLongTu_Q16738" />
            Two-by-two formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A40" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_TianLongTu_Q16738_2" />
            Straight four formation <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471_5" />
            Bent four corner formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Nie20" />
            Knife five formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A113" />
            Crowbar five formation --Three-by-two formation (two liberties) <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_Corner_A132" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471_4" />
            Corner six formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A38" />
            Corner five formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A67_4" />
            Flower six formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16859" />
            Flower seven formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B3" />
            Knife six formation <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31682" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31682_3" />
            - Two-by-four side formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31682" />
            Bent five formation <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31682_2" />
            - T side formation (two liberties) <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471" />
            - One-by-four side formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Side_B32" />
            Seven side formation <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471_6" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471_7" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.CheckRedundantKillGroupExtension(Go.Board,Go.Board)">
            <summary>
            Redundant extension of kill group.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A8" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_Corner_A113" />
            Empty point neighbour <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471_8" />
            Atari target <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A40" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31499_3" />
            Whole group dying <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A36" />
            Bent four corner formation <see cref="!:UnitTestProject.BentFourTest.BentFourTest_Scenario7kyu26_3" />
            Check previous group for killer formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A38" />
            Two kill formations <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_XuanXuanGo_A54" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.SuicidalEndMove(Go.Board,Go.Board)">
            <summary>
            Suicidal end move.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.IsFirstPoint(Go.Board,Go.Point,Go.Point)">
            <summary>
            Is first point.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.WholeGroupDying(Go.Board)">
            <summary>
            Whole group dying.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_B3" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.SuicideMoveValidWithOneEmptySpaceLeft(Go.Board)">
            <summary>
            Suicide move with one empty space surrounded by opponent stones.
            Move group with three points <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario1kyu29" />
            Move group binding <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B19_2" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.IsLinkToExternalGroup(Go.Board,Go.Board,Go.Board)">
            <summary>
            Ensure link is connected to both stones from previous move group and to external group.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16520_2" />
            Check connect and die <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30403" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A4Q11_101Weiqi_2" />
            Connect three or more groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B3" />
            No lost groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18402_2" />
            Lost group not more than two points <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31682" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17154" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.SuicideForLibertyFight(Go.Board,Go.Board,System.Boolean)">
            <summary>
            Suicide for liberty fight.
            Both alive <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q15126_2" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q15126_3" />
            Not both alive <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A40_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30215_2" />
            Two target groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30215_3" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_GuanZiPu_B18_4" />
            Check killer ko within killer group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A28_101Weiqi_2" />
            Ko move on external liberty (optional) <see cref="!:UnitTestProject.DailyGoProblems.DailyGoProblems_20221024_5" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.TwoPointSuicideAtCoveredEye(Go.Board,Go.Board)">
            <summary>
            Two-point suicide at covered eye. 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q31469" />
            Make move at the other empty point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_B57" />
            Check for killer group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16424_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31499_2" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.TwoPointAtariMove(Go.Board,Go.Board)">
            <summary>
            Two point atari move.
            Check for three groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q30935" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q2757_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A82_101Weiqi" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_TianLongTu_Q15017" />
            Check snapback <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q31469" />
            Check for ko fight 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31672" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31428" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.BentThreeSuicideAtCoveredEye(Go.Board,Go.Board)">
            <summary>
            Bent three suicide at covered eye.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31453" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.CheckAnyEndPointCovered(System.Collections.Generic.IEnumerable{Go.Point},Go.Board,Go.Group)">
            <summary>
            Check any end point covered. 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31682" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31682_2" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31682_x" />
            Two liberties <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_Corner_A132" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_WuQingYuan_Q31471_x" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_20230121_8" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.GetPointIntersect(Go.Board,System.Collections.Generic.IEnumerable{Go.Point})">
            <summary>
            Get point intersect.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.WithinThreeByTwoGrid(Go.Group)">
            <summary>
            Killer group within 3 by 2 grid.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.WithinGrid(System.Collections.Generic.IEnumerable{Go.Point})">
            <summary>
            Rectangular space defining the max and min of points in x-axis and y-axis.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.GridDimensionChanged(System.Collections.Generic.IEnumerable{Go.Point},System.Collections.Generic.IEnumerable{Go.Point})">
            <summary>
            Grid dimension changed.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.MaxLengthOfGrid(System.Collections.Generic.IEnumerable{Go.Point})">
            <summary>
            Max length of x and y length of grid.
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.OpponentBreakKillFormation(Go.Board,Go.Board)">
            <summary>
            Opponent break kill formation.
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_TianLongTu_Q16827" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_TianLongTu_Q16859_2" />
            </summary>
        </member>
        <member name="M:Go.KillerFormationHelper.GetMaxBindingPoint(Go.Board,System.Collections.Generic.IEnumerable{Go.Board},Go.Group)">
            <summary>
            Point for killer to form max binding.
            Ordering <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A36_2" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q30919_2" />
            Check for dead formation <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_TianLongTu_Q16902" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A16" />
            Check for opponent break formation <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A80_3" />
            </summary>
        </member>
        <member name="M:Go.KoHelper.KoSurvivalEnabled(Go.SurviveOrKill,Go.GameInfo)">
            <summary>
            Enables one way ko check - either survive or kill
            If objective is survive with ko or kill, then ko for survive is enabled, else if objective is survive or kill with ko, then ko for kill is enabled
            </summary>
        </member>
        <member name="M:Go.KoHelper.IsKoFight(Go.Board,Go.Group)">
            <summary>
            Is ko fight, including both pre-ko and ko.
            </summary>
        </member>
        <member name="M:Go.KoHelper.IsNonKillableGroupKoFight(Go.Board,Go.Group)">
            <summary>
            Is non killable group ko fight.
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_GuanZiPu_A4Q11_101Weiqi" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_A64" />
            </summary>
        </member>
        <member name="M:Go.KoHelper.IsForwardOrReverseKoFight(Go.Board)">
            <summary>
            Is forward or reverse ko fight.
            </summary>
        </member>
        <member name="M:Go.KoHelper.MakeKoFight(Go.Board,Go.Point,Go.Content)">
            <summary>
            Make ko fight.
            </summary>
        </member>
        <member name="M:Go.KoHelper.IsCaptureKoFight(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Is ko fight after capture.
            </summary>
        </member>
        <member name="M:Go.KoHelper.IsCaptureKoFight(Go.Board,Go.Point,Go.Content,System.Boolean)">
            <summary>
            Is ko fight at eye point.
            </summary>
        </member>
        <member name="M:Go.KoHelper.CheckReverseKoForNeutralPoint(Go.Board)">
            <summary>
            Reverse ko for neutral point move.
            Rare scenario where neutral point required for ko <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_A80" />
            </summary>
        </member>
        <member name="M:Go.KoHelper.GetKoTargetGroups(Go.Board,Go.Group,Go.Group)">
            <summary>
            Get ko atari groups.
            </summary>
        </member>
        <member name="M:Go.KoHelper.GetKoEyePoint(Go.Board)">
            <summary>
            Get ko eye point.
            </summary>
        </member>
        <member name="M:Go.KoHelper.CheckBaseLineLeapLink(Go.Board,Go.Point,Go.Content)">
            <summary>
            Check base line leap link for redundant ko move and fill ko eye move.
            </summary>
        </member>
        <member name="M:Go.KoHelper.PossibilityOfDoubleKo(Go.GameTryMove)">
            <summary>
            Check for possibility of double ko, for both survival and kill. Check for end ko moves as well.
            Survival double ko <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_TianLongTu_Q16446" />
            <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_TianLongTu_Q16975" />
            <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_WindAndTime_Q30275_3" /> 
            Kill double ko <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_A23" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WuQingYuan_Q30982_2" />
            <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_WindAndTime_Q30275_2" /> 
            </summary>
        </member>
        <member name="M:Go.KoHelper.NeutralPointDoubleKo(Go.Board,Go.Board)">
            <summary>
            Double ko for neutral point.
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_A28_101Weiqi_4" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_B41_2" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.PossibleLinkForGroups(Go.Board,Go.Board)">
            <summary>
            Possible link for groups. For neutral point move, covered eye move, and eye diagonal move.
            <see cref="!:UnitTestProject.BaseLineSurvivalMoveTest.BaseLineSurvivalMoveTest_Scenario5dan25" />
            <see cref="!:UnitTestProject.BaseLineSurvivalMoveTest.BaseLineSurvivalMoveTest_Scenario_XuanXuanGo_Q18358" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18497" />
            Check ko link <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_TianLongTu_Q16738" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckForPossibleBigLeap(Go.Board)">
            <summary>
            Check for possible big leap.
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_XuanXuanQiJing_Weiqi101_18497_5" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetPossibleLeapGroups(Go.Board,Go.Board,System.Collections.Generic.List{Go.Group})">
            <summary>
            Get possible leap groups.
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30274" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.IsAbsoluteLinkForGroups(Go.Board,Go.Board)">
            <summary>
            Is absolute link by stone only.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckIsDiagonalLinked(Go.Point,Go.Point,Go.Board,System.Boolean)">
            <summary>
            Check if diagonals are linked.
            Both diagonals empty <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571_4" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_TianLongTu_Q16571_2" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_TianLongTu_Q17078" />
            Check not negligible <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_8" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_4" />
            Check any diagonal separated by opposite content <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_5" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckIsDiagonalLinked(Go.LinkedPoint{Go.Point},Go.Board,System.Boolean)">
            <summary>
            Check is diagonal linked.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckDoubleLinkage(Go.Board,Go.LinkedPoint{Go.Point})">
            <summary>
            Check for double linkage.
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_TianLongTu_Q16571_2" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_TianLongTu_Q16571_3" />
            Check double atari at link <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_DoubleAtariOnLinkage" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckDoubleAtariForLinks(Go.Board,Go.LinkedPoint{Go.Point})">
            <summary>
            Check double atari for links.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571_7" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571_5" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_Nie60" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetAllDiagonalConnectedGroups(Go.Board,Go.Group,System.Func{Go.Group,System.Boolean})">
            <summary>
            Get all diagonal connected groups.
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_Nie60" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_3" />
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetGroupLinkedDiagonals(Go.Board,Go.Group,System.Boolean)">
            <summary>
            Get group linked diagonals.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetDiagonalGroups(Go.Board,Go.Group)">
            <summary>
            Get diagonal groups.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetGroupDiagonals(Go.Board,Go.Group)">
            <summary>
            Get all diagonals of group regardless of content.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetMoveDiagonals(Go.Board)">
            <summary>
            Get diagonals of move of same content that are not part of the move group.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.IsDiagonallyConnectedGroups(System.Collections.Generic.HashSet{Go.Group},Go.Board,System.Func{Go.Group,System.Boolean})">
            <summary>
            Is diagonally connected groups.  Use func to find specific group else look for all connected groups.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.IsDiagonallyConnectedGroups(Go.Board,Go.Group,Go.Group)">
            <summary>
            Is diagonally connected groups. 
            </summary>
        </member>
        <member name="M:Go.LinkHelper.IsImmediateDiagonallyConnected(Go.Board,Go.Group,Go.Group)">
            <summary>
            Is immediate diagonally connected. 
            </summary>
        </member>
        <member name="M:Go.LinkHelper.PossibleLinkToAnyGroup(Go.Board,Go.Group,Go.Group)">
            <summary>
            Possible link to any group.
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_XuanXuanQiJing_Weiqi101_18497_4" />
            Link for kill <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B74" />
            Link through move group <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18497" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_TianLongTu_Q16902" /> 
            Captured eye point <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18497_2" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_Q18340" /> 
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckTigerMouthExceptionsForLinks(Go.Board,Go.LinkedPoint{Go.Point})">
            <summary>
            Check tiger mouth exceptions for links.
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_2" /> 
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_3" /> 
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetTigerMouthsOfLinks(Go.Board,Go.LinkedPoint{Go.Point})">
            <summary>
            Get tiger mouth of links.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetAllDiagonalGroups(Go.Board,Go.Group,System.Func{Go.Group,System.Boolean},System.Collections.Generic.List{Go.Group})">
            <summary>
            Get all diagonal groups by recursion.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.CheckAllDiagonalGroups(Go.Board,Go.Group,System.Func{Go.Group,System.Boolean},System.Collections.Generic.List{Go.Group})">
            <summary>
            Check all diagonal groups.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.PointsBetweenDiagonals(Go.Point,Go.Point)">
            <summary>
            Get the opposite diagonals of the two diagonal points.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.FindDiagonalCut(Go.Board,Go.Group)">
            <summary>
            Diagonal cut between two neighbour groups.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.DiagonalCutMove(Go.Board)">
            <summary>
            Diagonal cut at move.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetPreviousMoveGroup(Go.Board,Go.Board)">
            <summary>
            Get stones within move group on current board.
            </summary>
        </member>
        <member name="M:Go.LinkHelper.GetNeighboursDiagonallyLinked(Go.Board)">
            <summary>
            Get stone neighbours at diagonal of each other.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Go.RedundantMoveHelper.FindPotentialEye(Go.GameTryMove)">
            <summary>
            Find potential eye that should not be filled. 
            Check for killer formations 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A113_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A151_101Weiqi" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A18" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantCoveredEyeMove(Go.GameTryMove)">
            <summary>
            Redundant covered eye move.
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_GuanZiPu_A2Q28_101Weiqi" /> 
            Two-point covered eye <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_Corner_A68" /> 
            Find covered eye for opponent <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18410" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q31673" /> 
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.FindCoveredEyeMove(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Find covered eye.
            Check for double ko <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            Check kill opponent <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A34" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WindAndTime_Q30198" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WindAndTime_Q29998" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            Check eye for survival <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q30982" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q31398" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_Corner_B25" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WindAndTime_Q29277" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario4dan10" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A26" /> 
            Check no eye for survival for opponent <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WindAndTime_Q30332" /> 
            Check liberty count without covered eye <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_A64" />
            Check must-have move <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_20221019_7" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_20221024_4" />
            Check one-point snapback <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q31453" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A37_101Weiqi" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A26_4" /> 
            Check atari for ko move <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A26_2" />
            Check possible links <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18497_2" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B74" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_A40" />
            Set neutral point for opponent <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_Corner_B21" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckTwoLibertyGroupToCaptureNeighbour(Go.Board,Go.Board,Go.Group,Go.Point)">
            <summary>
            Check two liberty group to capture neighbour.
            <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_Corner_B41" /> 
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanQiJing_A38" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_A64" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_Q18341_2" />
            Check eye for suicidal move <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WindAndTime_Q30275" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_Corner_A84_3" />
            Capture opponent groups <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_TianLongTu_Q17154" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WuQingYuan_Q30982_3" />
            Check escape capture link <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanGo_A26_3" />
            Ko fight <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanQiJing_A38_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.FillKoEyeMove(Go.GameTryMove)">
            <summary>
            Fill ko eye move. <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_XuanXuanGo_A46_101Weiqi" />
            Double atari <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30358" /> 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A82_101Weiqi" /> 
            Check for weak eye group <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_Corner_B28" />
            Check both alive <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_SimpleSeki" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_A151_101Weiqi_2" /> 
            Check break link <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_WuQingYuan_Q31657" /> 
            Ensure group more than one point have more than one liberty <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_Nie20" /> 
            Check for killer formation <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_Corner_A67" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Nie20" />
            Check weak group in connect and die <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_XuanXuanGo_B6" /> 
            Check suicide at tiger mouth <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_TianLongTu_Q16867" /> 
            <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_GuanZiPu_B3" /> 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30358" /> 
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_WindAndTime_Q30225" /> 
            Check survival eye <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_Corner_A36" /> 
            <see cref="!:UnitTestProject.KoTest.KoTest_Scenario_Corner_A80" /> 
            <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_WuQingYuan_Q30982" /> 
            Check opponent double ko <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_WindAndTime_Q30275_2" /> 
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_XuanXuanQiJing_Weiqi101_18497_2" /> 
            Set as neutral point <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_TianLongTu_Q16490" />
            Two covered eyes <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario5dan18" />
            Three liberty eye group <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario5dan18_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.ThreeLibertyGroupNearCapture(Go.Board,Go.Group)">
            <summary>
            Three liberty group near capture.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SuicideGroupNearCapture(Go.Board)">
            <summary>
            Suicide group near capture.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SuicideAtBigTigerMouth(Go.GameTryMove)">
            <summary>
            Suicide at big tiger mouth.
            <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_GuanZiPu_B3" /> 
            <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_Corner_A85" /> 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario6kyu13" />
            Check for eye at liberty <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Side_B19" />
            Opponent capture two or more points <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_A23" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanQiJing_Weiqi101_7245" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_TianLongTu_Q16827_2" />
            Check for opponent survival move <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_WindAndTime_Q29475" /> 
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanQiJing_Weiqi101_7245_2" />
            Unstoppable group <see cref="!:UnitTestProject.BaseLineKillerMoveTest.BaseLineKillerMoveTest_Scenario_XuanXuanQiJing_A53" /> 
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.AtariRedundantMove(Go.GameTryMove)">
            <summary>
            Redundant atari move.
            <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_Corner_A9_Ext" />
            Check for increased killer groups <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_TianLongTu_Q16487" />
            <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_WuQingYuan_Q31493" />
            Check for reverse ko fight <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_WuQingYuan_Q30982" />
            Check for diagonal killer group <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_WindAndTime_Q30225_2" />
            <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_WindAndTime_Q30225_3" />
            Ensure more than one liberty for move group <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_Corner_A68" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16748" />
            Check for weak groups <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_WuQingYuan_Q31503" />
            Check capture secure <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B74" />
            Check killer formation <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_Side_A25" />
            <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_Side_A23" />
            Count possible eyes at stone neighbours <see cref="!:UnitTestProject.AtariRedundantMoveTest.AtariRedundantMoveTest_Scenario_XuanXuanGo_A151_101Weiqi" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SuicidalRedundantMove(Go.GameTryMove)">
            <summary>
            Suicidal moves are moves that have liberty of one only.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SuicidalMoveWithinNonKillableGroup(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Suicidal move within non killable group.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario3dan17" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario3kyu28_2" />
            Check for negligible in opponent move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A38_3" />
            Check any is non killable <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30370" />
            Check for covered eye <see cref="!:UnitTestProject.RedundantTigerMouthMove.RedundantTigerMouthMove_Scenario_WindAndTime_Q30225_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.ThreeLibertySuicidal(Go.GameTryMove)">
            <summary>
            Three liberty suicidal.
            <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario5dan18" />
            <see cref="!:UnitTestProject.ThreeLibertySuicidalTest.ThreeLibertySuicidalTest_Scenario_GuanZiPu_A2Q29_101Weiqi" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.MultiPointOpponentSuicidalMove(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Multi point opponent suicidal move.
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_XuanXuanGo_A26" />
            Check move group liberties <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q14916_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A67" />
            Check for unescapable group <see cref = "!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_TianLongTu_Q17255" />
            Find eye at move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16850" />
            Check for ko or capture move by atari target <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q14992" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A145_101Weiqi" />
            Check snapback <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B31_4" />
            Check for suicide at big tiger mouth <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A55_2" />
            Check for eye at liberty point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A8" />
            Check for tiger mouth at liberty point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31646" />
            Check for suicidal at other end <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16867" />
            Check for both alive <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_TianLongTu_Q16827" />
            Set diagonal eye move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q29273" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.KoFightAtBloatedEye(Go.Board,Go.Board)">
            <summary>
            Ko fight at bloated eye.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A85" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_x_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckWeakGroupInOpponentSuicide(Go.Board,Go.Group)">
            <summary>
            Check weak group in opponent suicide.
            <see cref = "!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16604_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16604_4" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B32_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A67_3" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SuicidalConnectAndDie(Go.GameTryMove)">
            <summary>
            Check for connect and die moves. <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738" />
            Check capture moves <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A75_101Weiqi" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.CheckForRecursionTest_Scenario_Corner_B41" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A113_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_B36" />
            Check atari moves <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q30986" />
            Check killer formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A17_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A17_2" />
            Check killer move non killable group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31563" />
            Check redundant corner point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q2834" />
            Check for one-by-three kill <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18796_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantOnePointMoveInConnectAndDie(Go.GameTryMove,Go.Board)">
            <summary>
            Redundant one point move in connect and die.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A151_101Weiqi_4" />
            Ensure killer group contains only try move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16594" />
            Ensure all strong neighbour groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A151_101Weiqi_7" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckWeakGroupInConnectAndDie(Go.Board,Go.Group)">
            <summary>
            Check for weak group with two or less liberties in connect and die.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_x" />
            Reverse connect and die <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_WindAndTime_Q29277" />
            Corner move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16446" /> 
            Check for double atari for one-point move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q29481" />
            Check killable group with two or less liberties <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B6" />
            Check for weak group capturing atari group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_B17" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.GetWeakGroup(Go.Board,Go.Group)">
            <summary>
            Get weak group.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.FindBloatedEyeSuicide(Go.GameTryMove,Go.Board)">
            <summary>
            Find bloated eye suicide <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario_GuanZiPu_A35" />
            Check killer formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A113_4" />
            Check reverse ko fight <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A30" />
            Check for eye at corner point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A67_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckAnyRealEyeInSuicidalConnectAndDie(Go.Board,Go.Board)">
            <summary>
            Check for real eye in neighbour groups.
            Check for split killer group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_B3_3" />
            Check for corner six formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A38_3" /> 
            Check for one-point eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A30" />
            Check for two-point snapback <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A55" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31680_2" />
            Check snapback in neighbour groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30234_2" />
            Check for one-by-three kill <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18796_2" />
            Check for covered eye group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q6150" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A17" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30403_2" />
            Check for covered eye move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738_8" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckDiagonalForSuicidalConnectAndDie(Go.GameTryMove,Go.Board)">
            <summary>
            Check for suicidal moves depending on diagonal groups.
            Check liberties are connected <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30064" />
            Check for killer formation <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_GuanZiPu_A4Q11_101Weiqi_2" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_TianLongTu_Q15082" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16748" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A2Q28_101Weiqi" />
            Stone neighbours at diagonal of each other <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q2757" />
            Check diagonal at opposite corner of stone neighbours <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31493" />
            Cut diagonal and kill <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B74_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17081_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A61" />
            Ensure no shared liberty with neighbour group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A55" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A17_3" />
            Check move next to covered point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17132_4" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckNoDiagonalAndNoLibertyAtMove(Go.GameTryMove,Go.Board)">
            <summary>
            Check for no diagonals and no liberties at move.
            Ensure no liberties <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30064" />
            Check for three neighbour groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30198" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16605" />
            Check killer formation <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31499_3" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SinglePointSuicidalMove(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Single point suicide.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SuicideWithinRealEye(Go.GameTryMove,Go.Board)">
            <summary>
            Suicide within real eye. 
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_ScenarioHighLevel28" />
            Check corner point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A80" />
            Check for snapback  <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B31" />
            Atari move required <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q2757" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_Q18500_3" />
            Suicide for liberty fight <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A40_2" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_WuQingYuan_Q15126" />
            <see cref="!:UnitTestProject.BothAliveTest.BothAliveTest_Scenario_GuanZiPu_B18_3" />
            Two liberties - suicide for both players <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_A19" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30215" />
            Three liberties <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_20221019_6" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckNonTwoPointGroupInSuicideRealEye(Go.GameTryMove,Go.Board)">
            <summary>
            Check for non two-point group.
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_B31_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario4dan17_2" />
            Not redundant <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31536" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A139" />
            Real solid eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario1dan4_3" />
            Check killer group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario4dan17_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckTwoPointGroupInSuicideRealEye(Go.GameTryMove,Go.Board)">
            <summary>
            Check for two-point group.
            Check connect and die <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q15126" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_1887" />
            Check for liberty fight <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q18796" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.MiscSinglePointSuicide(Go.GameTryMove,Go.Board,Go.GameTryMove)">
            <summary>
            Miscellaneous single point suicide.
            Check connect and die at diagonal group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738_6" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738_7" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_GuanZiPu_B18" />
            Suicidal move next to non killable group for survive <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A27_2" />
            Connect and die <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_XuanXuanGo_B32" />
            Liberty more than two required to prevent snapback <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31680" />
            Diagonal neighbours that are non killable groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17160" />
            Opponent suicide <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_TianLongTu_Q16490" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A55" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_Nie67" />
            Check connect end move <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_TianLongTu_Q16738_2" />
            Check real eye at diagonal <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17132_3" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_B25_2" />
            Without opposite content <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Side_B4" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CornerPointSuicide(Go.GameTryMove,Go.Board)">
            Check corner point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A26_2" />
            Check connect and die <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16738_5" />
            Specific filler move <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A17_2" />
            One point target <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A26_2" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A84_2" />
            <see cref="!:UnitTestProject.KoTest.KoTest_Scenario_WuQingYuan_Q31680" />
            Not suicidal for semi-solid eye <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A95" />
        </member>
        <member name="M:Go.RedundantMoveHelper.MultiPointSuicidalMove(Go.GameTryMove)">
            <summary>
            Multi point suicide move.
            Capture at tryBoard <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A23" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_A36" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A2Q71_101Weiqi" />
            Eternal life <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_GuanZiPu_Q14971" />
            Capture at tryBoard more than recapture <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q30935_2" />
            Captured more than move group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A42" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31682" />
            Four-point group scenario <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16604" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31435" />
            Check for recursion <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_XuanXuanGo_A27" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q14981" />
            Two-point atari move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A82_101Weiqi" />
            Atari on next move <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q30935" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A171_101Weiqi" />
            Check atari by previous move group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q16424_2" />
            Move group binding <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B19_2" />
            Two-point atari covered eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A32" />
            Suicide at covered eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31499_2" />
            Exclude if corner point <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Corner_A9_Ext_2" />
            <see cref="!:UnitTestProject.KillerFormationTest.KillerFormationTest_Scenario_TianLongTu_Q16424" />
            No hope of escape <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_TianLongTu_Q17132_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SurvivalLeapMove(Go.GameTryMove)">
            <summary>
            Leap moves are moves two spaces away from the closest neighbour stone of same content.
            <see cref="!:UnitTestProject.LeapMoveTest.LeapMoveTest_Scenario_XuanXuanQiJing_A1" />
            Check non killable group <see cref="!:UnitTestProject.LeapMoveTest.LeapMoveTest_Scenario_XuanXuanGo_A23" />
            Check for kill move by survival <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_GuanZiPu_B3" />
            Not redundant leap move <see cref="!:UnitTestProject.LeapMoveTest.LeapMoveTest_Scenario_GuanZiPu_B3" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.ValidateLeapMove(Go.Board,Go.Point,Go.Point,System.Boolean)">
            <summary>
            For leap on same line, check for non killable group between the two points as well as one space above or below the space between the leap.
            For leap on different lines, check for non killable group between the two points from min to max of the lines.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.NeutralPointSurvivalMove(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Neutral points are moves that cannot create eye for the survival group. 
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_WuQingYuan_Q30935" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.NeutralPointKillMove(Go.GameTryMove)">
            <summary>
            Neutral point kill moves - Check if neutral point from point of view of survival
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_B12_2" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_Q18500_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.NeutralPointSuicidalMove(Go.GameTryMove)">
            <summary>
            Neutral point suicidal move.
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_20221214_5" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.EssentialAtariAtCoveredEye(Go.GameTryMove)">
            <summary>
            Essential atari at covered eye.
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario4dan17" />
            <see cref="!:UnitTestProject.BaseLineSurvivalMoveTest.BaseLineSurvivalMoveTest_Scenario_Corner_A84" />
            Check for ko fight <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_Corner_A36" />
            Check neighbour groups <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_Phenomena_B7" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_A28_101Weiqi_3" />
            <see cref="!:UnitTestProject.BaseLineSurvivalMoveTest.BaseLineSurvivalMoveTest_Scenario_TianLongTu_Q16456" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.MustHaveNeutralPoint(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Must have neutral point.
            Neutral point at small tiger mouth <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario5dan27_3" />
            Neutral point at big tiger mouth <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario5dan27_Variation" />
            Negative example <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_A27" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_A23" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_GuanZiPu_Weiqi101_19138" />
            Check if atari <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_A23" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_TianLongTu_Q17136" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_Q18500_4" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Corner_A68" />
            Check if link for groups <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Corner_A84" />
            Check for tiger mouth <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Corner_A27" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Phenomena_Q25182" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_TianLongTu_Q16827" />
            Connect and die <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_A28_101Weiqi" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Corner_A67" />
            Two must have neutral moves <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_GuanZiPu_Weiqi101_19138" />
            Generic neutral move with must have neutral move <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Corner_A68_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.MustHaveMoveAtKoFight(Go.GameTryMove)">
            <summary>
            Must have move at ko fight.
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_20221229_7" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.MustHaveMoveAtBigTigerMouth(Go.Board,Go.GameTryMove)">
            <summary>
            Must have move at big tiger mouth.        
            Liberties more than one <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanQiJing_Weiqi101_7245" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanGo_A23" />
            Strong groups at tiger mouth <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Corner_A68" />
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_TianLongTu_Q17136" />
            Capture at liberty <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_TianLongTu_Q17132" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.StrongGroupsAtMustHaveMove(Go.Board,Go.Point)">
            <summary>
            Strong neighbour groups at tiger mouth for must-have move.
            <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario5dan27_3" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_20221024_4" />
            Check liberty fight <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_20221128_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.ValidateNeutralPoint(Go.GameTryMove)">
            <summary>
            Validate neutral point by checking if move creates eye for survival at any of the stone and diagonal neighbours.
            Check link for groups <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18497" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_XuanXuanQiJing_Weiqi101_7245" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RestoreNeutralMove(Go.Game,System.Collections.Generic.List{Go.GameTryMove},System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Neutral points for kill moves have to be restored on end game in order to kill survival group.
            Two pre-atari moves <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_Corner_A55" />
            No try moves left <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_Side_A20" />
            Remaining move at liberty point <see cref="!:UnitTestProject.MustHaveNeutralMoveTest.MustHaveNeutralMoveTest_Scenario_XuanXuanQiJing_Weiqi101_7245" />
            Check connect and die for last two try moves <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.NeutralPointMoveTest_Scenario_XuanXuanGo_B32" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_Side_B35" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_XuanXuanGo_A151_101Weiqi_5" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31580" />
            Suicide group near capture <see cref="!:UnitTestProject.FillKoEyeMoveTest.FillKoEyeMoveTest_Scenario_TianLongTu_Q16490" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_WuQingYuan_Q6150" />
            <see cref="!:UnitTestProject.NeutralPointMoveTest.NeutralPointMoveTest_Scenario_Corner_B21" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.ConnectAndDieEndMove(Go.Board)">
            <summary>
            Connect and die end move.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.GetSpecificNeutralMove(Go.Game,System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Get specific neutral move to target survival groups with limited liberties.
            Two specific moves <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B51" />
            Check snapback <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_ScenarioHighLevel18" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.IsImmovableKill(Go.Game,System.Collections.Generic.List{Go.Group})">
            <summary>
            Conditions for specific kill with immovable points. <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanGo_A54" />
            Covered eye liberty <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanGo_A54_3" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SpecificKillWithImmovablePoints(Go.Board,System.Collections.Generic.List{Go.GameTryMove},Go.Group)">
            <summary>
            Specific kill with immovable points.
            Survival group has liberty less or equals to two <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario5dan27" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_TianLongTu_Q16735" />
            At least one liberty shared with killer group <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanGo_A54_2" />
            Check that survival cannot clear space <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanGo_A54" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SpecificKillWithLibertyFight(Go.Board,System.Collections.Generic.List{Go.GameTryMove},System.Collections.Generic.List{Go.Group})">
            <summary>
            Specific kill with liberty fight.
            Find neighbour groups at diagonal cut <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_20221017_5" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario3kyu24_3" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario3kyu24_5" />
            <see cref="!:UnitTestProject.DailyGoProblems.DailyGoProblems_20221017_5" />
            Target group contains killer group <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_TianLongTu_Q2413" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_TianLongTu_Q16827" />
            Real solid eye found <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario_XuanXuanGo_B7" />
            <see cref="!:UnitTestProject.SpecificNeutralMoveTest.SpecificNeutralMoveTest_Scenario3kyu24" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.GetGenericNeutralMove(Go.Game,System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Get generic neutral moves that are not specific. Killer group required.
            One neighbour group <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario_XuanXuanGo_Q18500" />
            More than one neighbour group <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario5dan27_2" />
            Get all extended groups <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario_XuanXuanGo_Q18340" />
            Get all groups including eyes <see cref="!:UnitTestProject.GenericNeutralMoveTest.GenericNeutralMoveTest_Scenario4dan17_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantTigerMouthMove(Go.GameTryMove)">
            <summary>
            Redundant tiger mouth.
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18473" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantTigerMouth(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Check eye points at diagonals of tiger mouth. If all eye points are tiger mouth then is redundant. <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_XuanXuanGo_B31" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_TianLongTu_Q16827" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_GuanZiPu_Q18860" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_WuQingYuan_Q15126" />
            Check possible corner three formation <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_WuQingYuan_Q31503_2" />
            Opponent move at tiger mouth <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_XuanXuanGo_A151_101Weiqi" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_Nie67" />
            Uncovered eye at diagonal point <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_20221231_6" />
            Check for non killable group <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WindAndTime_Q30370" />
            Check for suicide at big tiger mouth <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_Corner_A87" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SurvivalTigerMouthMoveTest_Scenario_TianLongTu_Q16470" />
            Check move and diagonal space <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_Nie4" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_WuQingYuan_Q15126" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q31428" />
            Check connect end move <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_TianLongTu_Q16738_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.TigerMouthWithoutDiagonalMouth(Go.GameTryMove,Go.Board)">
            <summary>
            Redundant tiger mouth without diagonal mouth.
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_XuanXuanGo_A26" />
            Check for covered eye <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_AncientJapanese_B6" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_TianLongTu_Q16738" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_WindAndTime_Q30225" />
            Check for three groups <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_Q1970" />
            <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_WuQingYuan_Q30935" />
            Check for strong neighbour groups <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario3dan22" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_TianLongTu_Q16605" />
            <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_Scenario_XuanXuanGo_A28" />
            Check for no liberty at move <see cref="!:UnitTestProject.SurvivalTigerMouthMoveTest.RedundantTigerMouthMove_20221220_7" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SurvivalEyeDiagonalMove(Go.GameTryMove)">
            <summary>
            Find eye diagonal moves that are redundant.
            <see cref="!:UnitTestProject.RedundantEyeDiagonalMoveTest.RedundantEyeDiagonalMoveTest_Scenario_XuanXuanQiJing_Weiqi101_18473" />
            Check diagonals are real eyes <see cref="!:UnitTestProject.ImmovableTest.ImmovableTest_Scenario_XuanXuanGo_B31" />
            Ensure diagonal not required for both alive. 
            <see cref="!:UnitTestProject.RedundantEyeDiagonalMoveTest.RedundantEyeDiagonalMoveTest_Scenario_SiHuoDaQuan_CornerA29_2" />
            Check link to groups <see cref="!:UnitTestProject.RedundantEyeDiagonalMoveTest.RedundantEyeDiagonalMoveTest_Scenario_WuQingYuan_Q31154" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SurvivalEyeFillerMove(Go.GameTryMove)">
            <summary>
            Survival eye filler moves. Get specific move for group not more than five points and generic move for more than five points. 
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.KillEyeFillerMove(Go.GameTryMove)">
            <summary>
            Kill eye filler moves. Get specific move for group not more than five points.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.FillerMoveWithoutKillerGroup(Go.GameTryMove,Go.GameTryMove)">
            <summary>
            Filler moves without killer group <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanQiJing_A1" />
            Filler moves with killer group <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_B3" />
            Check for one point leap move <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanGo_B10_2" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_B40" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WindAndTime_Q30278" />
            Check killer leap move <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_TianLongTu_Q16985" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A56" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario3dan22" />
            Check two-point group <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Side_B35" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SiegeScenario(Go.Board,System.Collections.Generic.List{Go.Point},System.Int32)">
            <summary>
            Siege scenario. At least one closest group targeted by neighbour group.
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WindAndTime_Q30278" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.GenericEyeFillerMove(Go.GameTryMove)">
            <summary>
            Remove redundant moves that fill eyes instead of creating eyes within eye space for survival.
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_B3" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_B3_2" />
            Ensure not link for groups <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q5971" />
            Check for ko fight <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A36_3" />
            Get stone neighbours only for killer group <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_TianLongTu_Q15017" />
            Check any opponent stone at stone and diagonal points <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanGo_Q18500" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A56_3" />
            Check any opponent stone at neighbour points <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_TianLongTu_Q16827" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_TianLongTu_Q16827_2" />
            <see cref="!:UnitTestProject.BaseLineKillerMoveTest.BaseLineKillerMoveTest_Scenario_TianLongTu_Q16520" />
            Check corner point <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanGo_A26" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_B8" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanQiJing_Weiqi101_7245" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckRedundantCornerPoint(Go.GameTryMove,Go.Board)">
            <summary>
            Check redundant corner point.
            Check for kill formation <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanQiJing_Weiqi101_7245" />
            Multipoint snapback <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_B43" />
            Two point kill <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q16508" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A6" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.EyeFillerLinkForGroups(Go.GameTryMove)">
            <summary>
            Eye filler link for groups.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.SpecificEyeFillerMove(Go.GameTryMove)">
            <summary>
            Return specific survival or killer move if killer group contains five points or less. 
            Neighbour groups liberty more than one <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A37" />
            Check immovable at liberties <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q31602" />
            Not link for groups <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_WuQingYuan_Q31537" />
            Prevent survival creating eye <see cref="!:UnitTestProject.SuicidalRedundantMoveTest.SuicidalRedundantMoveTest_Scenario_GuanZiPu_A17_4" />
            Group binding <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A16" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A36" />
            No neighbour group <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A80" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_Corner_A61_2" />
            <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_XuanXuanGo_A4" />
            Check for atari on neighbour groups <see cref="!:UnitTestProject.RedundantEyeFillerTest.RedundantEyeFillerTest_Scenario_GuanZiPu_A36_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.PossibleEyesCreated(Go.Board,Go.Point,Go.Content)">
            <summary>
            Return number of possible eyes that can be created at stone neighbour points.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantSurvivalPreKoMove(Go.GameTryMove)">
            <summary>
            Redundant survival pre ko moves <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_A46_101Weiqi_2" />
            Double ko recursion <see cref="!:UnitTestProject.CheckForRecursionTest.CheckForRecursionTest_Scenario_Corner_B41" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantKillerPreKoMove(Go.GameTryMove)">
            <summary>
            Redundant killer pre ko moves <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKillerKoMoveTest_Scenario_XuanXuanGo_A46_101Weiqi_2" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantKillerKoMove(Go.GameTryMove)">
            <summary>
            Redundant killer ko moves <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKillerKoMoveTest_Scenario_XuanXuanGo_A46_101Weiqi" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.RedundantSurvivalKoMove(Go.GameTryMove)">
            <summary>
            Redundant survival ko moves <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_A46_101Weiqi" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_SimpleSeki" />
            Check for opponent <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WindAndTime_Q30152" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_B10" />
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckRedundantKoMove(Go.Board,Go.Board)">
            <summary>
            Check redundant ko move.
            </summary>
        </member>
        <member name="M:Go.RedundantMoveHelper.CheckRedundantKo(Go.Board,Go.Board)">
            <summary>
            Check redundant ko. 
            ko fight at non killable group <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_A27" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_GuanZiPu_A4Q11_101Weiqi" />
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_XuanXuanQiJing_A64" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_20221128" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_20221128_3" /> 
            ko fight necessary <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario2kyu18" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanQiJing_Weiqi101_B74" />
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Corner_A62" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_Nie20" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_TianLongTu_Q2413" /> 
            Real eye at diagonal <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WuQingYuan_Q30982" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_A151_101Weiqi" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanGo_A151_101Weiqi_2" /> 
            Suicide group ko fight <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_XuanXuanQiJing_A38_2" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_TianLongTu_Q16693_2" /> 
            <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_x_2" /> 
            Check break link <see cref="!:UnitTestProject.RedundantKoMoveTest.RedundantKoMoveTest_Scenario_WindAndTime_Q30152_2" /> 
            <see cref="!:UnitTestProject.CoveredEyeMoveTest.CoveredEyeMoveTest_Scenario_WindAndTime_Q30152" /> 
            </summary>
        </member>
        <member name="M:Go.ResultHelper.GameEndedMessage(Go.ConfirmAliveResult,Go.Game)">
            <summary>
            Display game ended message from flags in confirm alive result.
            </summary>
        </member>
        <member name="T:Go.SolutionHelper">
            <summary>
            Retrieves solution move from solutionPoints in GameInfo if solution is followed.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.UseSolutionPoints(Go.Game)">
            <summary>
            Get solution move and make move on the board.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.GetSolutionMove(Go.Game)">
            <summary>
            Check if last moves followed any of the solutions and return the solution move.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.CheckSolutionComplete(Go.Game)">
            <summary>
            Check if last moves followed any of the solutions and return confirm alive result.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.GetNextAnswerHint(Go.Game)">
            <summary>
            Get next move as hint.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.AnswerFound(Go.Game)">
            <summary>
            Check if end of solution reached.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.GetDictateMove(Go.Game)">
            <summary>
            Get dictate move where dictate points are specified.
            </summary>
        </member>
        <member name="M:Go.SolutionHelper.FollowedSolution(System.Collections.Generic.List{System.Collections.Generic.List{Go.Point}},System.Collections.Generic.List{Go.Point})">
            <summary>
            Check if last moves followed any of the solutions and return the index of the solution move.
            </summary>
        </member>
        <member name="T:Go.UniquePatternsHelper">
            <summary>
            Unique patterns such as BentFour and Ten Thousand Year Ko have to identified and return the correct result that can be different from calculated result.
            </summary>
        </member>
        <member name="M:Go.UniquePatternsHelper.CheckForBentFour(Go.Board,System.Collections.Generic.List{Go.GameTryMove})">
            <summary>
            Bent four is a unique scenario where it appears to be ko alive but is essentially dead. 
            https://senseis.xmp.net/?BentFourInTheCorner
            <see cref="!:UnitTestProject.BentFourTest.BentFourTest_Scenario7kyu26_2" />
            Check for covered eye <see cref="!:UnitTestProject.BentFourTest.BentFourTest_Scenario_Corner_A87" />
            </summary>
        </member>
        <member name="M:Go.UniquePatternsHelper.PreCornerBentFourFormation(Go.Board,Go.Group)">
            <summary>
            Bent three or straight three formation at corner with two liberty points in killer group.
            </summary>
        </member>
        <member name="M:Go.UniquePatternsHelper.CheckForTenThousandYearKo(Go.Game)">
            <summary>
            The ten thousand year ko appears to be ko alive but is essentially alive. 
            https://senseis.xmp.net/?TenThousandYearKo
            <see cref="!:UnitTestProject.TenThousandYearKoTest.TenThousandYearKoTest_Scenario_XuanXuanGo_Q18500" />
            </summary>
        </member>
        <member name="M:Go.UniquePatternsHelper.TenThousandYearKoEye(Go.Board,Go.Point,Go.Content)">
            <summary>
            Ten thousand year ko eye.
            </summary>
        </member>
        <member name="M:Go.WallHelper.NoEyeForSurvival(Go.Board,Go.Point,Go.Content)">
            <summary>
            Check if move creates eye for survival. If all stone and diagonal neighbours is same content or is wall then move is redundant neutral point.
            </summary>
        </member>
        <member name="M:Go.WallHelper.NoEyeForSurvivalAtNeighbourPoints(Go.Board)">
            <summary>
            Check no eye for survival.
            </summary>
        </member>
        <member name="M:Go.WallHelper.IsWall(Go.Board,Go.Point,System.Boolean)">
            <summary>
            Wall is either opposite content which is non killable or empty point which is not movable.
            </summary>
        </member>
        <member name="M:Go.WallHelper.IsNonKillableGroup(Go.Board,Go.Point)">
            <summary>
            Non killable group cannot be surrounded and killed as neighbour points are not movable.
            </summary>
        </member>
        <member name="M:Go.WallHelper.IsNonKillableFromSetupMoves(Go.Board,Go.Group)">
            <summary>
            Check if non-killable at neighbour points that are empty.
            </summary>
        </member>
        <member name="M:Go.WallHelper.StrongNeighbourGroups(Go.Board,System.Collections.Generic.IEnumerable{Go.Group})">
            <summary>
            Strong neighbour groups that cannot be captured by connect and die.
            </summary>
        </member>
        <member name="M:Go.WallHelper.HostileNeighbourGroups(Go.Board,Go.Point,Go.Content)">
            <summary>
            Hostile neighbour groups with two liberties that are suicidal to opponent.
            </summary>
        </member>
        <member name="M:Go.WallHelper.TargetWithAllNonKillableGroups(Go.Board,Go.Group)">
            <summary>
            Target with all non killable groups.
            </summary>
        </member>
        <member name="M:Go.WallHelper.TargetWithAnyNonKillableGroup(Go.Board,Go.Group)">
            <summary>
            Target with any non killable group.
            </summary>
        </member>
        <member name="M:Go.WallHelper.TargetWithKoFightAtAllNonKillableGroups(Go.Board,Go.Group)">
            <summary>
            Target with ko fight at all non killable groups.
            </summary>
        </member>
        <member name="M:Go.WallHelper.AllTargetWithinNonKillableGroups(Go.Board)">
            <summary>
            All target within non killable groups.
            </summary>
        </member>
        <member name="M:Go.GameMapping.GetMappedJson(Go.Game)">
            <summary>
            Retrieves the mapped json from GameInfo object.
            </summary>
        </member>
        <member name="M:Go.GameMapping.SerializeJson(Go.Game)">
            <summary>
            Serialize json to string and write to file. It is possible to call from immediate window, even if mapping is not fully completed to retrieve partial json map.
            </summary>
        </member>
        <member name="M:Go.GameMapping.FindPassMoveInJson(Newtonsoft.Json.Linq.JArray)">
            <summary>
            Find if any pass move in json which are likely errors. Pass move can also be a valid move returned by computer move. 
            </summary>
        </member>
        <member name="T:Go.JsonHelper">
            <summary>
            Creates the json map that extends up to three levels.
            </summary>
        </member>
        <member name="M:Go.JsonHelper.FirstLevelMapping(System.Object,Go.Point,Go.Point)">
            <summary>
            Create or retrieve first level move in json.
            </summary>
        </member>
        <member name="M:Go.JsonHelper.SecondLevelMapping(Newtonsoft.Json.Linq.JObject,Go.Point,Go.Point)">
            <summary>
            Create or retrieve second level move in json.
            </summary>
        </member>
        <member name="M:Go.JsonHelper.ThirdLevelMapping(Newtonsoft.Json.Linq.JObject,Go.Point,Go.Point)">
            <summary>
            Create or retrieve third level move in json.
            </summary>
        </member>
        <member name="T:Go.MappingVerification">
            <summary>
            Verification of the json map by searching for opponent moves after sixth move. Inherits the MonteCarloMapping class with modifications for third level mapping.
            Error is found if opponent seventh move wins and answer is returned.
            </summary>
        </member>
        <member name="M:Go.MappingVerification.ThirdLevelMappingForSolution(Go.Game,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Overrides function to provide verification for third level.
            </summary>
        </member>
        <member name="M:Go.MappingVerification.FinalVerification(Go.Game)">
            <summary>
            Verify mapped move with mcts. If answer is returned then error is found.
            </summary>
        </member>
        <member name="T:Go.MonteCarloMapping">
            <summary>
            Mapping all possible moves up to three levels on a json map, including ko moves, redundant moves, etc.
            This will enable a spontaneous response in real-time play up to three levels.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.MappingFirstLevel(Go.Game)">
            <summary>
            Start mapping from first level.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.SecondLevelMappingForSolution(Go.Game,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Second level mapping if first level has been mapped or solution found.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.ThirdLevelMappingForSolution(Go.Game,Newtonsoft.Json.Linq.JObject)">
            <summary>
            Third level mapping if second level has been mapped or solution found.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.MakeMoveAndCheckIfAnswerFound(Go.Game,Go.Point)">
            <summary>
            Make move on the board and check if game has ended by confirm alive or end of solution.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.MapAnswerNodeToJson(Go.Game,Go.Point,Go.Node,System.Boolean)">
            <summary>
            Map all three levels from answer node to json map.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.MonteCarloMapThirdFourthMove(Go.Game,Go.Point,Go.Point,Go.Node)">
            <summary>
            Map second and third levels from answer node to json map.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.MonteCarloMapFifthSixthMove(Go.Game,Go.Point,Go.Point,Go.Node)">
            <summary>
            Map third level from answer node to json map.
            </summary>
        </member>
        <member name="M:Go.MonteCarloMapping.MappingRange(Go.Board)">
            <summary>
            On mapping, return true for the first three levels (or first six moves) in order to map all moves whether redundant or not.
            </summary>
        </member>
        <member name="M:Go.LifeCheck.ConfirmAlive(Go.Board,System.Collections.Generic.List{Go.Point})">
            <summary>
            Confirm alive.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_ScenarioTestConfirmAlive1" />
            Partial alive <see cref="!:UnitTestProject.PartiallyAliveTest.PartiallyAliveTest_Scenario_WindAndTime_Q30215" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.ConfirmAlive(Go.Board,Go.Group)">
            <summary>
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16860" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Corner_A28" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.CheckTigerMouthExceptions(Go.Board,System.Collections.Generic.IEnumerable{Go.Point},Go.Content,System.Boolean)">
            <summary>
            Check tiger mouth exceptions.
            Possible corner three formation <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Corner_A139_2" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WuQingYuan_Q31503" />
            Suicidal at tiger mouth  <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WuQingYuan_Q31177" />
            Tiger mouth escape with atari <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WindAndTime_Q30150" />
            Double tiger mouth <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_XuanXuanGo_B3" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.CommonTigerMouthExceptions(Go.Board,Go.Content,Go.Point,Go.Point,System.Boolean)">
            <summary>
            Common tiger mouth exceptions.
            Check for atari at tiger mouth <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Nie60_4" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_WindAndTime_Q30150_2" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_9" />
            Check for tiger mouth threat group  
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_7" />
            Check for two threat groups <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_6" />
            Check for another tiger mouth at move <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_10" />
            Check for link breakage <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150_2" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_Nie60_2" />
            Link breakage for pre atari groups <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Nie60_2" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Nie60_3" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_Nie60_4" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.TigerMouthThreatGroup(Go.Board,Go.Point,Go.Content)">
            <summary>
            Get tiger mouth threat group.
            </summary>
        </member>
        <member name="M:Go.LifeCheck.DoubleTigerMouthLink(Go.Board,Go.Board,Go.Point,Go.Point,System.Boolean)">
            <summary>
            Double tiger mouth link.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_TianLongTu_Q16571" />
            <see cref="!:UnitTestProject.LinkHelperTest.LinkHelperTest_Scenario_WindAndTime_Q30150" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.GetTigerMouthsOfEyeGroups(Go.Board,Go.Group,System.Collections.Generic.List{Go.LinkedPoint{Go.Point}})">
            <summary>
            Get tiger mouth of eye groups.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571_2" />
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571_3" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.CheckOpponentDoubleAtari(Go.Board,System.Collections.Generic.List{Go.Group},System.Collections.Generic.List{Go.LinkedPoint{Go.Point}})">
            <summary>
            Check opponent double atari moves.
            <see cref="!:UnitTestProject.LifeCheckTest.LifeCheckTest_Scenario_TianLongTu_Q16571_7" />
            </summary>
        </member>
        <member name="M:Go.LifeCheck.GetTargets(Go.Board,System.Collections.Generic.List{Go.Point})">
            <summary>
            Get targets of survival group. Can specify other targets than specified in game info.
            </summary>
        </member>
        <member name="M:Go.LifeCheck.CheckIfTargetGroupKilled(Go.Board)">
            <summary>
            Check if all target points are killed.
            </summary>
        </member>
        <member name="M:Go.LifeCheck.CheckIfTargetSurvivedOrKilled(Go.ConfirmAliveResult,Go.SurviveOrKill,Go.Game)">
            <summary>
            Includes target survived and target killed flags to prompt user.
            </summary>
        </member>
        <member name="M:Go.LifeCheck.CheckIfDeadOrAlive(Go.SurviveOrKill,Go.Game)">
            <summary>
            Check if target group is dead or alive, including survival points check.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.InitializeMonteCarloComputerMove(Go.Game,Go.Node,System.Int32)">
            <summary>
            Create new mcts search tree and initialize search.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.MonteCarloRealTimeMove(Go.Game)">
            <summary>
            Start mcts search for real-time move. Not used in mapping.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.ResultBothAlive(Go.Game)">
            <summary>
            Return both alive only if no more external liberties.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.GetAnswerJson(Go.Game,Go.Node)">
            <summary>
            Json for search answer.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.SetupLeelazGame(Go.Game)">
            <summary>
            Make setup moves in leela board.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.ConvertAndMakeMoveInLeelaBoard(Go.Point,Go.Content)">
            <summary>
            Convert coordinates and make move in leela board.
            </summary>
        </member>
        <member name="M:Go.MonteCarloGame.MyProcess_OutputDataReceived(System.Object,System.Diagnostics.DataReceivedEventArgs)">
            <summary>
            Retrieve neural network heatmap and other output data from leelaz.
            </summary>
        </member>
        <member name="F:Go.MonteCarloTreeSearch.visitCount">
            <summary>
            Set the visit count required to reach before moving down the tree to the child node. Reduce required count after hitting depth to verify.
            </summary>
        </member>
        <member name="F:Go.MonteCarloTreeSearch.answerNode">
            <summary>
            Set the answer and end the search immediately.
            </summary>
        </member>
        <member name="P:Go.MonteCarloTreeSearch.DepthToVerify">
            <summary>
            Depth to start exhaustive search to verify.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.FindNextMove(Go.Node)">
            <summary>
            Start the mcts until answer is found or all nodes are pruned (or max iterations reached).
            <see cref="!:UnitTestProject.PerformanceBenchmarkTest.PerformanceBenchmarkTest_Scenario2dan15" />
            <see cref="!:UnitTestProject.PerformanceBenchmarkTest.PerformanceBenchmarkTest_Scenario_GuanZiPu_A3" />
            <see cref="!:UnitTestProject.PerformanceBenchmarkTest.PerformanceBenchmarkTest_Scenario3dan17" />
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.PruneBasedOnWinResult(Go.Node,System.Boolean)">
            <summary>
            To prune node based on exhaustive search result or confirm alive result.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.VerifyOnDepthReached(Go.Node)">
            <summary>
            Verify with exhaustive search on reaching specified depth.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.PrunePromisingNode(Go.Node,Go.Node,System.Boolean,System.Boolean)">
            <summary>
            Prune node after verifying with exhaustive search and if result is a win then check if parent node is correct by trying to prune all child nodes.
            After all nodes are pruned, move up the level by recursion to check if current path is correct and the answer node will be the first node of the tree.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.CheckAllChildNodesPruned(Go.Node,System.Boolean)">
            <summary>
            Check if all nodes have been pruned. Check if answer found else continue to prune parent of current node.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.AnswerFound(Go.Node)">
            <summary>
            Answer found when current depth of node is count of last moves of root node plus one. Set as AnswerNode and return true.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.Pruning(Go.Node,Go.Node)">
            <summary>
            Prune node after verification and set pruned node in json map.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.SelectPromisingNode(Go.Node)">
            <summary>
            Selection phase - to select the most promising node from sibling nodes based on UCT value.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.ExpandNode(Go.Node)">
            <summary>
            Expansion phase - to expand all possible states as child nodes.
            Confirm alive for each possible state to check if game ended with objective reached already.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.BackPropagation(Go.Node,System.Boolean,System.Int32)">
            <summary>
            Back propagation phase - to increase score alternately up the levels for the winner.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.SimulateRandomPlayout(Go.Node)">
            <summary>
            Simulation phase - to simulate monte carlo playout by randomization of moves.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.HandleConfirmedCases(Go.Node)">
            <summary>
            Confirmed cases represent possible game state where the game has ended with confirm alive already.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.MonteCarloMakeKillMove(System.Int32,Go.Game)">
            <summary>
            Make kill move in mcts simulation phase by selecting from all possible moves by randomization.
            Include ko moves and set result as KoAlive if ko wins.
            </summary>
        </member>
        <member name="M:Go.MonteCarloTreeSearch.MonteCarloMakeSurvivalMove(System.Int32,Go.Game)">
            <summary>
            Make survival move in mcts simulation phase by selecting from all possible moves by randomization.
            Include ko moves and set result as KoAlive if ko wins.
            </summary>
        </member>
        <member name="M:Go.State.GetAllPossibleMoves(Go.Game)">
            <summary>
            Get all possible moves for mcts, including ko moves.
            </summary>
        </member>
        <member name="P:Go.Tree.Root">
            <summary>
            Starting node of current mcts.
            </summary>
        </member>
        <member name="P:Go.Tree.AbsoluteRoot">
            <summary>
            Starting node of initial mcts.
            </summary>
        </member>
        <member name="M:Go.UCT.findBestNodeWithUCT(Go.Node)">
            <summary>
            Find best child node using uct value.
            </summary>
        </member>
    </members>
</doc>
